// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: samestep.proto
#ifndef GRPC_samestep_2eproto__INCLUDED
#define GRPC_samestep_2eproto__INCLUDED

#include "samestep.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace Simple {

// 指定服务的名称，作为生成代码里面的二级namespace
class Server final {
 public:
  static constexpr char const* service_full_name() {
    return "Simple.Server";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 测试接口三
    virtual ::grpc::Status Test3(::grpc::ClientContext* context, const ::Simple::TestRequest& request, ::Simple::TestReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Simple::TestReply>> AsyncTest3(::grpc::ClientContext* context, const ::Simple::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Simple::TestReply>>(AsyncTest3Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Simple::TestReply>> PrepareAsyncTest3(::grpc::ClientContext* context, const ::Simple::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Simple::TestReply>>(PrepareAsyncTest3Raw(context, request, cq));
    }
    // 向服务端
    virtual ::grpc::Status ToS(::grpc::ClientContext* context, const ::Simple::Post& request, ::Simple::Post* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>> AsyncToS(::grpc::ClientContext* context, const ::Simple::Post& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>>(AsyncToSRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>> PrepareAsyncToS(::grpc::ClientContext* context, const ::Simple::Post& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>>(PrepareAsyncToSRaw(context, request, cq));
    }
    // 向客户端
    virtual ::grpc::Status ToC(::grpc::ClientContext* context, const ::Simple::Id& request, ::Simple::Post* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>> AsyncToC(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>>(AsyncToCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>> PrepareAsyncToC(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>>(PrepareAsyncToCRaw(context, request, cq));
    }
    virtual ::grpc::Status Exist_Test(::grpc::ClientContext* context, const ::Simple::Id& request, ::Simple::Post* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>> AsyncExist_Test(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>>(AsyncExist_TestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>> PrepareAsyncExist_Test(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>>(PrepareAsyncExist_TestRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 测试接口三
      virtual void Test3(::grpc::ClientContext* context, const ::Simple::TestRequest* request, ::Simple::TestReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Test3(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::TestReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Test3(::grpc::ClientContext* context, const ::Simple::TestRequest* request, ::Simple::TestReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Test3(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::TestReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 向服务端
      virtual void ToS(::grpc::ClientContext* context, const ::Simple::Post* request, ::Simple::Post* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ToS(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ToS(::grpc::ClientContext* context, const ::Simple::Post* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ToS(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // 向客户端
      virtual void ToC(::grpc::ClientContext* context, const ::Simple::Id* request, ::Simple::Post* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ToC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ToC(::grpc::ClientContext* context, const ::Simple::Id* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ToC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Exist_Test(::grpc::ClientContext* context, const ::Simple::Id* request, ::Simple::Post* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Exist_Test(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Exist_Test(::grpc::ClientContext* context, const ::Simple::Id* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Exist_Test(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Simple::TestReply>* AsyncTest3Raw(::grpc::ClientContext* context, const ::Simple::TestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Simple::TestReply>* PrepareAsyncTest3Raw(::grpc::ClientContext* context, const ::Simple::TestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>* AsyncToSRaw(::grpc::ClientContext* context, const ::Simple::Post& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>* PrepareAsyncToSRaw(::grpc::ClientContext* context, const ::Simple::Post& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>* AsyncToCRaw(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>* PrepareAsyncToCRaw(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>* AsyncExist_TestRaw(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Simple::Post>* PrepareAsyncExist_TestRaw(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Test3(::grpc::ClientContext* context, const ::Simple::TestRequest& request, ::Simple::TestReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Simple::TestReply>> AsyncTest3(::grpc::ClientContext* context, const ::Simple::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Simple::TestReply>>(AsyncTest3Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Simple::TestReply>> PrepareAsyncTest3(::grpc::ClientContext* context, const ::Simple::TestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Simple::TestReply>>(PrepareAsyncTest3Raw(context, request, cq));
    }
    ::grpc::Status ToS(::grpc::ClientContext* context, const ::Simple::Post& request, ::Simple::Post* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Simple::Post>> AsyncToS(::grpc::ClientContext* context, const ::Simple::Post& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Simple::Post>>(AsyncToSRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Simple::Post>> PrepareAsyncToS(::grpc::ClientContext* context, const ::Simple::Post& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Simple::Post>>(PrepareAsyncToSRaw(context, request, cq));
    }
    ::grpc::Status ToC(::grpc::ClientContext* context, const ::Simple::Id& request, ::Simple::Post* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Simple::Post>> AsyncToC(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Simple::Post>>(AsyncToCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Simple::Post>> PrepareAsyncToC(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Simple::Post>>(PrepareAsyncToCRaw(context, request, cq));
    }
    ::grpc::Status Exist_Test(::grpc::ClientContext* context, const ::Simple::Id& request, ::Simple::Post* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Simple::Post>> AsyncExist_Test(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Simple::Post>>(AsyncExist_TestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Simple::Post>> PrepareAsyncExist_Test(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Simple::Post>>(PrepareAsyncExist_TestRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Test3(::grpc::ClientContext* context, const ::Simple::TestRequest* request, ::Simple::TestReply* response, std::function<void(::grpc::Status)>) override;
      void Test3(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::TestReply* response, std::function<void(::grpc::Status)>) override;
      void Test3(::grpc::ClientContext* context, const ::Simple::TestRequest* request, ::Simple::TestReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Test3(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::TestReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ToS(::grpc::ClientContext* context, const ::Simple::Post* request, ::Simple::Post* response, std::function<void(::grpc::Status)>) override;
      void ToS(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, std::function<void(::grpc::Status)>) override;
      void ToS(::grpc::ClientContext* context, const ::Simple::Post* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ToS(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ToC(::grpc::ClientContext* context, const ::Simple::Id* request, ::Simple::Post* response, std::function<void(::grpc::Status)>) override;
      void ToC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, std::function<void(::grpc::Status)>) override;
      void ToC(::grpc::ClientContext* context, const ::Simple::Id* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ToC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Exist_Test(::grpc::ClientContext* context, const ::Simple::Id* request, ::Simple::Post* response, std::function<void(::grpc::Status)>) override;
      void Exist_Test(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, std::function<void(::grpc::Status)>) override;
      void Exist_Test(::grpc::ClientContext* context, const ::Simple::Id* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Exist_Test(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Simple::TestReply>* AsyncTest3Raw(::grpc::ClientContext* context, const ::Simple::TestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Simple::TestReply>* PrepareAsyncTest3Raw(::grpc::ClientContext* context, const ::Simple::TestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Simple::Post>* AsyncToSRaw(::grpc::ClientContext* context, const ::Simple::Post& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Simple::Post>* PrepareAsyncToSRaw(::grpc::ClientContext* context, const ::Simple::Post& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Simple::Post>* AsyncToCRaw(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Simple::Post>* PrepareAsyncToCRaw(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Simple::Post>* AsyncExist_TestRaw(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Simple::Post>* PrepareAsyncExist_TestRaw(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Test3_;
    const ::grpc::internal::RpcMethod rpcmethod_ToS_;
    const ::grpc::internal::RpcMethod rpcmethod_ToC_;
    const ::grpc::internal::RpcMethod rpcmethod_Exist_Test_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 测试接口三
    virtual ::grpc::Status Test3(::grpc::ServerContext* context, const ::Simple::TestRequest* request, ::Simple::TestReply* response);
    // 向服务端
    virtual ::grpc::Status ToS(::grpc::ServerContext* context, const ::Simple::Post* request, ::Simple::Post* response);
    // 向客户端
    virtual ::grpc::Status ToC(::grpc::ServerContext* context, const ::Simple::Id* request, ::Simple::Post* response);
    virtual ::grpc::Status Exist_Test(::grpc::ServerContext* context, const ::Simple::Id* request, ::Simple::Post* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Test3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Test3() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Test3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Test3(::grpc::ServerContext* /*context*/, const ::Simple::TestRequest* /*request*/, ::Simple::TestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTest3(::grpc::ServerContext* context, ::Simple::TestRequest* request, ::grpc::ServerAsyncResponseWriter< ::Simple::TestReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ToS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ToS() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ToS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToS(::grpc::ServerContext* /*context*/, const ::Simple::Post* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestToS(::grpc::ServerContext* context, ::Simple::Post* request, ::grpc::ServerAsyncResponseWriter< ::Simple::Post>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ToC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ToC() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ToC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToC(::grpc::ServerContext* /*context*/, const ::Simple::Id* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestToC(::grpc::ServerContext* context, ::Simple::Id* request, ::grpc::ServerAsyncResponseWriter< ::Simple::Post>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Exist_Test : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Exist_Test() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Exist_Test() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exist_Test(::grpc::ServerContext* /*context*/, const ::Simple::Id* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExist_Test(::grpc::ServerContext* context, ::Simple::Id* request, ::grpc::ServerAsyncResponseWriter< ::Simple::Post>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Test3<WithAsyncMethod_ToS<WithAsyncMethod_ToC<WithAsyncMethod_Exist_Test<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Test3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Test3() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::Simple::TestRequest, ::Simple::TestReply>(
          [this](::grpc::ServerContext* context,
                 const ::Simple::TestRequest* request,
                 ::Simple::TestReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Test3(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Test3(
        ::grpc::experimental::MessageAllocator< ::Simple::TestRequest, ::Simple::TestReply>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Simple::TestRequest, ::Simple::TestReply>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Test3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Test3(::grpc::ServerContext* /*context*/, const ::Simple::TestRequest* /*request*/, ::Simple::TestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Test3(::grpc::ServerContext* /*context*/, const ::Simple::TestRequest* /*request*/, ::Simple::TestReply* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ToS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ToS() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::Simple::Post, ::Simple::Post>(
          [this](::grpc::ServerContext* context,
                 const ::Simple::Post* request,
                 ::Simple::Post* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ToS(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ToS(
        ::grpc::experimental::MessageAllocator< ::Simple::Post, ::Simple::Post>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Simple::Post, ::Simple::Post>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ToS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToS(::grpc::ServerContext* /*context*/, const ::Simple::Post* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ToS(::grpc::ServerContext* /*context*/, const ::Simple::Post* /*request*/, ::Simple::Post* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ToC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ToC() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::Simple::Id, ::Simple::Post>(
          [this](::grpc::ServerContext* context,
                 const ::Simple::Id* request,
                 ::Simple::Post* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ToC(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ToC(
        ::grpc::experimental::MessageAllocator< ::Simple::Id, ::Simple::Post>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Simple::Id, ::Simple::Post>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ToC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToC(::grpc::ServerContext* /*context*/, const ::Simple::Id* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ToC(::grpc::ServerContext* /*context*/, const ::Simple::Id* /*request*/, ::Simple::Post* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Exist_Test : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Exist_Test() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::Simple::Id, ::Simple::Post>(
          [this](::grpc::ServerContext* context,
                 const ::Simple::Id* request,
                 ::Simple::Post* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Exist_Test(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Exist_Test(
        ::grpc::experimental::MessageAllocator< ::Simple::Id, ::Simple::Post>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Simple::Id, ::Simple::Post>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Exist_Test() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exist_Test(::grpc::ServerContext* /*context*/, const ::Simple::Id* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Exist_Test(::grpc::ServerContext* /*context*/, const ::Simple::Id* /*request*/, ::Simple::Post* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Test3<ExperimentalWithCallbackMethod_ToS<ExperimentalWithCallbackMethod_ToC<ExperimentalWithCallbackMethod_Exist_Test<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Test3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Test3() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Test3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Test3(::grpc::ServerContext* /*context*/, const ::Simple::TestRequest* /*request*/, ::Simple::TestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ToS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ToS() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ToS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToS(::grpc::ServerContext* /*context*/, const ::Simple::Post* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ToC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ToC() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ToC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToC(::grpc::ServerContext* /*context*/, const ::Simple::Id* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Exist_Test : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Exist_Test() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Exist_Test() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exist_Test(::grpc::ServerContext* /*context*/, const ::Simple::Id* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Test3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Test3() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Test3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Test3(::grpc::ServerContext* /*context*/, const ::Simple::TestRequest* /*request*/, ::Simple::TestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTest3(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ToS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ToS() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ToS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToS(::grpc::ServerContext* /*context*/, const ::Simple::Post* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestToS(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ToC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ToC() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ToC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToC(::grpc::ServerContext* /*context*/, const ::Simple::Id* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestToC(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Exist_Test : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Exist_Test() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Exist_Test() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exist_Test(::grpc::ServerContext* /*context*/, const ::Simple::Id* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExist_Test(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Test3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Test3() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Test3(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Test3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Test3(::grpc::ServerContext* /*context*/, const ::Simple::TestRequest* /*request*/, ::Simple::TestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Test3(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ToS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ToS() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ToS(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ToS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToS(::grpc::ServerContext* /*context*/, const ::Simple::Post* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ToS(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ToC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ToC() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ToC(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ToC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ToC(::grpc::ServerContext* /*context*/, const ::Simple::Id* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ToC(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Exist_Test : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Exist_Test() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Exist_Test(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Exist_Test() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exist_Test(::grpc::ServerContext* /*context*/, const ::Simple::Id* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Exist_Test(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Test3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Test3() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Simple::TestRequest, ::Simple::TestReply>(std::bind(&WithStreamedUnaryMethod_Test3<BaseClass>::StreamedTest3, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Test3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Test3(::grpc::ServerContext* /*context*/, const ::Simple::TestRequest* /*request*/, ::Simple::TestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTest3(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Simple::TestRequest,::Simple::TestReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ToS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ToS() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::Simple::Post, ::Simple::Post>(std::bind(&WithStreamedUnaryMethod_ToS<BaseClass>::StreamedToS, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ToS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ToS(::grpc::ServerContext* /*context*/, const ::Simple::Post* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedToS(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Simple::Post,::Simple::Post>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ToC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ToC() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::Simple::Id, ::Simple::Post>(std::bind(&WithStreamedUnaryMethod_ToC<BaseClass>::StreamedToC, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ToC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ToC(::grpc::ServerContext* /*context*/, const ::Simple::Id* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedToC(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Simple::Id,::Simple::Post>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Exist_Test : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Exist_Test() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::Simple::Id, ::Simple::Post>(std::bind(&WithStreamedUnaryMethod_Exist_Test<BaseClass>::StreamedExist_Test, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Exist_Test() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Exist_Test(::grpc::ServerContext* /*context*/, const ::Simple::Id* /*request*/, ::Simple::Post* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExist_Test(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Simple::Id,::Simple::Post>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Test3<WithStreamedUnaryMethod_ToS<WithStreamedUnaryMethod_ToC<WithStreamedUnaryMethod_Exist_Test<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Test3<WithStreamedUnaryMethod_ToS<WithStreamedUnaryMethod_ToC<WithStreamedUnaryMethod_Exist_Test<Service > > > > StreamedService;
};

}  // namespace Simple


#endif  // GRPC_samestep_2eproto__INCLUDED
