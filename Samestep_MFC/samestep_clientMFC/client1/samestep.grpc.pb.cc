// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: samestep.proto
#include "samestep.pb.h"
#include "samestep.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Simple {

static const char* Server_method_names[] = {
  "/Simple.Server/Test3",
  "/Simple.Server/ToS",
  "/Simple.Server/ToC",
  "/Simple.Server/Exist_Test",
};

std::unique_ptr< Server::Stub> Server::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Server::Stub> stub(new Server::Stub(channel));
  return stub;
}

Server::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Test3_(Server_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ToS_(Server_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ToC_(Server_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Exist_Test_(Server_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Server::Stub::Test3(::grpc::ClientContext* context, const ::Simple::TestRequest& request, ::Simple::TestReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Test3_, context, request, response);
}

void Server::Stub::experimental_async::Test3(::grpc::ClientContext* context, const ::Simple::TestRequest* request, ::Simple::TestReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Test3_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::Test3(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::TestReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Test3_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::Test3(::grpc::ClientContext* context, const ::Simple::TestRequest* request, ::Simple::TestReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Test3_, context, request, response, reactor);
}

void Server::Stub::experimental_async::Test3(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::TestReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Test3_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Simple::TestReply>* Server::Stub::AsyncTest3Raw(::grpc::ClientContext* context, const ::Simple::TestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Simple::TestReply>::Create(channel_.get(), cq, rpcmethod_Test3_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Simple::TestReply>* Server::Stub::PrepareAsyncTest3Raw(::grpc::ClientContext* context, const ::Simple::TestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Simple::TestReply>::Create(channel_.get(), cq, rpcmethod_Test3_, context, request, false);
}

::grpc::Status Server::Stub::ToS(::grpc::ClientContext* context, const ::Simple::Post& request, ::Simple::Post* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ToS_, context, request, response);
}

void Server::Stub::experimental_async::ToS(::grpc::ClientContext* context, const ::Simple::Post* request, ::Simple::Post* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ToS_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::ToS(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ToS_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::ToS(::grpc::ClientContext* context, const ::Simple::Post* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ToS_, context, request, response, reactor);
}

void Server::Stub::experimental_async::ToS(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ToS_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Simple::Post>* Server::Stub::AsyncToSRaw(::grpc::ClientContext* context, const ::Simple::Post& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Simple::Post>::Create(channel_.get(), cq, rpcmethod_ToS_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Simple::Post>* Server::Stub::PrepareAsyncToSRaw(::grpc::ClientContext* context, const ::Simple::Post& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Simple::Post>::Create(channel_.get(), cq, rpcmethod_ToS_, context, request, false);
}

::grpc::Status Server::Stub::ToC(::grpc::ClientContext* context, const ::Simple::Id& request, ::Simple::Post* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ToC_, context, request, response);
}

void Server::Stub::experimental_async::ToC(::grpc::ClientContext* context, const ::Simple::Id* request, ::Simple::Post* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ToC_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::ToC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ToC_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::ToC(::grpc::ClientContext* context, const ::Simple::Id* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ToC_, context, request, response, reactor);
}

void Server::Stub::experimental_async::ToC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ToC_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Simple::Post>* Server::Stub::AsyncToCRaw(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Simple::Post>::Create(channel_.get(), cq, rpcmethod_ToC_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Simple::Post>* Server::Stub::PrepareAsyncToCRaw(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Simple::Post>::Create(channel_.get(), cq, rpcmethod_ToC_, context, request, false);
}

::grpc::Status Server::Stub::Exist_Test(::grpc::ClientContext* context, const ::Simple::Id& request, ::Simple::Post* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Exist_Test_, context, request, response);
}

void Server::Stub::experimental_async::Exist_Test(::grpc::ClientContext* context, const ::Simple::Id* request, ::Simple::Post* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Exist_Test_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::Exist_Test(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Exist_Test_, context, request, response, std::move(f));
}

void Server::Stub::experimental_async::Exist_Test(::grpc::ClientContext* context, const ::Simple::Id* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Exist_Test_, context, request, response, reactor);
}

void Server::Stub::experimental_async::Exist_Test(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Simple::Post* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Exist_Test_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Simple::Post>* Server::Stub::AsyncExist_TestRaw(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Simple::Post>::Create(channel_.get(), cq, rpcmethod_Exist_Test_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Simple::Post>* Server::Stub::PrepareAsyncExist_TestRaw(::grpc::ClientContext* context, const ::Simple::Id& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Simple::Post>::Create(channel_.get(), cq, rpcmethod_Exist_Test_, context, request, false);
}

Server::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Simple::TestRequest, ::Simple::TestReply>(
          std::mem_fn(&Server::Service::Test3), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Simple::Post, ::Simple::Post>(
          std::mem_fn(&Server::Service::ToS), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Simple::Id, ::Simple::Post>(
          std::mem_fn(&Server::Service::ToC), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Server_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Server::Service, ::Simple::Id, ::Simple::Post>(
          std::mem_fn(&Server::Service::Exist_Test), this)));
}

Server::Service::~Service() {
}

::grpc::Status Server::Service::Test3(::grpc::ServerContext* context, const ::Simple::TestRequest* request, ::Simple::TestReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::ToS(::grpc::ServerContext* context, const ::Simple::Post* request, ::Simple::Post* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::ToC(::grpc::ServerContext* context, const ::Simple::Id* request, ::Simple::Post* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Server::Service::Exist_Test(::grpc::ServerContext* context, const ::Simple::Id* request, ::Simple::Post* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Simple

